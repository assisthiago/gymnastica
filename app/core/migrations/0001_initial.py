# Generated by Django 5.1.7 on 2025-03-24 23:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='nome')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
            ],
            options={
                'verbose_name': 'unidade',
                'verbose_name_plural': 'unidades',
                'db_table': 'branch',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cpf', models.CharField(blank=True, default=None, max_length=11, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(11)], verbose_name='cpf')),
                ('phone', models.CharField(blank=True, default=None, max_length=11, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(11)], verbose_name='telefone')),
                ('birth_date', models.DateField(blank=True, default=None, null=True, verbose_name='data de nascimento')),
                ('frequency', models.CharField(blank=True, choices=[('1', '1x por semana'), ('2', '2x por semana'), ('3', '3x por semana'), ('4', '4x por semana'), ('5', '5x por semana'), ('6', '6x por semana'), ('7', '7x por semana')], default=None, max_length=1, null=True, verbose_name='frequência')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('branches', models.ManyToManyField(related_name='users', to='core.branch', verbose_name='unidades')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
                'db_table': 'user',
                'ordering': ['first_name', 'last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='data')),
                ('time', models.TimeField(verbose_name='horário')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='core.branch', verbose_name='unidade')),
                ('clients', models.ManyToManyField(related_name='client_trainings', to=settings.AUTH_USER_MODEL, verbose_name='clientes')),
                ('personal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_trainings', to=settings.AUTH_USER_MODEL, verbose_name='personal')),
            ],
            options={
                'verbose_name': 'treino',
                'verbose_name_plural': 'treinos',
                'db_table': 'training',
                'ordering': ['date', 'time'],
                'constraints': [models.UniqueConstraint(fields=('date', 'time', 'branch', 'personal'), name='unique_training')],
            },
        ),
    ]
